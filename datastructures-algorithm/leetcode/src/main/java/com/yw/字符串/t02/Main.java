package com.yw.字符串.t02;

/*
最长回文子串
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

 示例 1：
输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

 示例 2：
输入: "cbbd"
输出: "bb"

 Related Topics 字符串 动态规划
 👍 2976 👎 0
 */
import org.junit.Assert;
import org.junit.Test;

public class Main {
    @Test
    public void test() {
        long start = System.currentTimeMillis();
        Solution solution = new Solution();
        Assert.assertEquals("", solution.longestPalindrome(""));
        Assert.assertEquals("b", solution.longestPalindrome("b"));
        Assert.assertEquals("b", solution.longestPalindrome("bacbad"));
        Assert.assertEquals("bab", solution.longestPalindrome("babad"));
        Assert.assertEquals("bb", solution.longestPalindrome("cbbd"));
        Assert.assertEquals("aca", solution.longestPalindrome("aacabdkacaa"));
        Assert.assertEquals
                , solution.longestPalindrome
    }
}
class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1) return s;
        String ans = s.substring(0, 1);
        for (int i = 0; i < s.length(); i++) {
            for (int j = s.length(); j > i; j--) {
                String sub = s.substring(i, j);
                if (isPalindrome(sub) && sub.length() > ans.length()) {
                    ans = sub;
                    break;
                }
            }
            if (ans.length() >= s.length() - i) {
                break;
            }
        }
        return ans;
    }

    private boolean isPalindrome(String s) {
        if (s.length() <= 1) return true;
        int i = 0, j = s.length() - 1;
        while (true) {
            if (s.charAt(i) == s.charAt(j)) {
                if (i++ >= j--) {
                    return true;
                }
            } else {
                return false;
            }
        }
    }
}